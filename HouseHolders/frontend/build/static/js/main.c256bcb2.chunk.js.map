{"version":3,"sources":["components/Vehicles/vehicles.js","components/Header.js","components/Menubar.js","components/Kitchen/KitchenBar.js","components/Kitchen/Kitchen.js","components/Kitchen/Freezer.js","components/Kitchen/ShoppingList.js","services/renovations.js","components/Renovations/RenovationsList.js","components/Notification.js","components/Renovations/Renovations.js","services/maintenances.js","services/completedMaintenances.js","components/Maintenances/MaintenanceList.js","components/Maintenances/Maintenances.js","components/Money/Money.js","services/login.js","components/Login/Login.js","services/user.js","components/Login/CreateUserView.js","components/Login/LogOut.js","App.js","index.js"],"names":["Vehicles","className","Header","Menubar","user","setUser","exact","activeClassName","to","KitchenBar","Kitchen","Freezer","console","log","ShoppingList","useState","item","setItem","shoppingList","setShoppingList","type","value","onChange","event","target","onClick","concat","map","checked","test","baseUrl","token","getRenovations","a","config","headers","Authorization","axios","get","response","data","createRenovation","newObject","post","updateRenovation","id","request","put","deleteRenovation","delete","setToken","newToken","RenovationsList","notificationType","setNotificationType","setNotificationMessage","confirmation","setConfirmation","notificationButtons","setNotificationButtons","notificationMessage","renovationStartDate","renovations","setRenovations","showDetails","setShowDetails","useEffect","loggedUser","window","localStorage","getItem","JSON","parse","renovationServices","removeItem","then","reno","renderTime","timeToFix","convertedTime","Date","getDate","getMonth","getFullYear","markFinished","ren","find","status","setTimeout","targetRenovation","finishedDate","renovation","project","catch","error","filter","r","removeRenovation","renoToRemove","maintenance","confirm","handleLongDetails","alert","name","val","key","details","company","workBudget","materialBudget","otherBudget","Number","b","c","startDate","Notification","message","setMessage","Renovations","setProject","setDetails","setcompany","setWorkBudget","setMaterialBudget","setOtherBudget","setRenovationStartDate","calendarDate","setCalenderDate","renovationService","buttons","onSubmit","preventDefault","newReno","returnedReno","min","time","properDate","getMaintenances","createMaintenance","updateMaintenance","getById","deleteMaintenance","getCompletedMaintenances","createCompletedMaintenance","updateCompletedMaintenance","deleteCompletedMaintenance","MaintenanceList","completedTasks","setCompletedTasks","taskList","setTaskList","task","setTask","when","setWhen","lastTimeDone","setLastDoneTime","cost","setCost","oneTimeTask","setOneTimeTask","today","dateNow","maintenanceServices","completedMaintenanceServices","timeWhenTaskIsDone","countTimeLeftToDoTask","taskDone","howOften","dateWhenTaskDone","timeToDoCurrentTask","Math","ceil","getTime","abs","markAsDone","newPrice","mainte","prompt","targetMaintenanceDate","lastTime","newOnetimeTask","removeMaintenance","taskToBeRemoved","removeCompletedMaintenance","newTask","label","options","color","defaultValue","index","Maintenances","Money","thisYear","countTotalMoneyUsedMaintenances","totalMoneySpend","forEach","toFixed","countTotalMoneyUsedRenovations","renovationCosts","maintenanceCosts","totalMoneyUsed","renovationsThisYear","renovationYear","countMoneySpendOnRenovationsThisYear","maintenancesThisYear","taskYear","countMoneySpendOnMaintenancesThisYear","totalRenovationCost","totalMaintenanceCost","maintenanceYear","totalRefund","countTaxRefund","login","credentials","username","Login","setShowCreateUserForm","showCreateUserForm","loginStatus","setLoginStatus","setLoggedInUser","password","setUsername","setPassword","history","useHistory","handleLogin","loginServices","stringify","push","createUser","newUser","CreateUserView","userList","setUserList","setCreateUser","createUsername","setCreateUsername","createPassword","setCreatePassword","handleCreateUser","length","userService","LogOut","loggedInUser","App","toggleShowCreateUserForm","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c256bcb2.chunk.js","sourcesContent":["import { Route, Link} from \"react-router-dom\"\r\nimport './../../css/vehicles.css'\r\n\r\n\r\n\r\n\r\nconst Vehicles = () => {\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"vehiclesHeader\">Vehicles</h1>\r\n            <h3 className=\"comingSoon\"> coming soon...</h3>\r\n        </div>\r\n    )\r\n}\r\nexport default Vehicles","\r\n\r\nconst Header = () => {\r\n\r\n    return (\r\n      <div className=\"backroundHeader\">\r\n        <div className=\"header\">\r\n          <span className=\"firstLetter\">H</span>\r\n          <span className=\"basicLetter\">ouse</span>\r\n          <span className=\"firstLetter\">H</span>\r\n          <span className=\"basicLetter\">olders</span>\r\n        </div>\r\n      </div>\r\n      )\r\n}\r\n\r\nexport default Header","import { Route, Link, NavLink} from \"react-router-dom\"\r\nimport { useEffect, useState } from \"react\"\r\nimport './../css/menubar.css'\r\n\r\n\r\nconst Menubar = ({user,setUser}) => {\r\n   \r\n\r\n//           \r\n    return (\r\n        <div>\r\n        <div  className=\"links\">\r\n            <ul>\r\n\r\n          <li> <NavLink exact activeClassName=\"active\"  to=\"/kitchen\"><span>Kitchen</span></NavLink></li>\r\n          <li> <NavLink activeClassName=\"active\" to=\"/vehicles\"><span>Vehicles</span></NavLink></li>\r\n          <li> <NavLink activeClassName=\"active\" to=\"/renovations\"><span>Renovations</span></NavLink></li>\r\n          <li> <NavLink activeClassName=\"active\" to=\"/maintenances\"><span>Maintenances</span></NavLink></li>\r\n          <li> <NavLink activeClassName=\"active\" to=\"/Money\"><span>Money</span></NavLink></li>     \r\n            </ul>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Menubar","import { Route, Link} from \"react-router-dom\"\r\nimport './../../css/kitchen.css'\r\n\r\n\r\nconst KitchenBar = () => {\r\n\r\n    let a = 0\r\n    \r\n    if (a === 0){\r\n        return (\r\n            <div>\r\n                <h1 className=\"kitchenHeader\">Kitchen</h1>\r\n                <h3 className=\"comingSoon\"> coming soon...</h3>\r\n            </div>\r\n        )\r\n    } else {\r\n\r\n  \r\n\r\n\r\n    return (\r\n        \r\n        <div  className=\"links\">\r\n            <Link style={{ textDecoration: 'none' }} to=\"/shoppinglist\"><span>Shopping list  &nbsp; &nbsp; &nbsp;</span></Link>\r\n            <Link style={{ textDecoration: 'none' }} to=\"/fridge\"><span>Fridge  &nbsp; &nbsp; &nbsp;</span></Link>       \r\n            <Link style={{ textDecoration: 'none' }} to=\"/freezer\"><span path='/freezer'>Freezer  &nbsp; &nbsp; &nbsp;</span></Link>\r\n            <Link style={{ textDecoration: 'none' }} to=\"/pantry\"><span>Pantry  </span></Link>\r\n            \r\n            \r\n        </div>\r\n    )\r\n}\r\n}\r\n\r\nexport default KitchenBar\r\n","import KitchenBar from './KitchenBar.js'\r\n\r\n\r\n\r\nconst Kitchen = () => {\r\n\r\n\r\n    return (\r\n        <div className='Links'>\r\n            <span><KitchenBar /></span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Kitchen","import { Route, Link} from \"react-router-dom\"\r\n\r\n\r\nconst Freezer = () => {\r\n    console.log('test')\r\n\r\n    return (\r\n       \r\n        <div>\r\n            <h1>Inside your freezer:</h1>\r\n            <li> pakastepizzoja 3 kpl</li>\r\n            <li> kalapuikkoja 2 kpl</li>\r\n            <li> thaikubeja 5 kpl</li>\r\n            <li> jäätelötuutteja 12 kpl</li>\r\n        </div>\r\n        \r\n        \r\n    )\r\n\r\n}\r\n\r\nexport default Freezer","import { useState } from \"react\"\r\n\r\n\r\nconst ShoppingList = () => {\r\n\r\n    const [item, setItem] = useState('')\r\n    const [shoppingList , setShoppingList] = useState([])\r\n\r\n    const handleChange = (event) =>       {\r\n        setItem(event.target.value)\r\n    }\r\n\r\n    const addItem = () => {\r\n\r\n        setShoppingList(shoppingList.concat(item))\r\n        setItem('')\r\n     \r\n\r\n    }\r\n\r\n    const removeAll = () => {\r\n        setShoppingList([])\r\n\r\n\r\n    }\r\n    const test = (target) => {\r\n        setItem(target)\r\n        console.log(target.value ,\" ja tämä\" ,target.checked)\r\n\r\n    }\r\n     \r\n\r\n \r\n    return (\r\n        <div>       \r\n            <h1>Shopping list</h1>\r\n            <div>\r\n            <input type=\"text\" value={item}  onChange={handleChange}></input>\r\n            <button type=\"submit\" onClick={addItem}>Add to list</button>\r\n            <ul>\r\n            {shoppingList.map((item) => (\r\n            <li>{item} <input type=\"checkbox\" value={item} onClick={({target}) => test(target)}></input></li>\r\n            ))}\r\n            </ul>\r\n            <button type=\"submit\" onClick={removeAll}>remove all</button>\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ShoppingList","import axios from 'axios'\r\n\r\n//const baseUrl = 'http://localhost:3001/renovations'\r\nconst baseUrl = '/renovations'\r\n\r\nlet token = null\r\nconst setToken = newToken => {\r\n    token = `bearer ${newToken}`\r\n}\r\n\r\n\r\nconst getRenovations =  async () => {\r\n    const config = {\r\n        headers: {\r\n            Authorization: token\r\n        },\r\n        }\r\n\r\n    try {\r\n        const response = await axios.get(baseUrl,config)\r\n        return response.data\r\n    } catch(error){\r\n    }\r\n\r\n}\r\n\r\nconst createRenovation = async newObject => {\r\n    const config = {\r\n        headers: {\r\n            Authorization: token\r\n        },\r\n        }\r\n\r\n    try {\r\n        const response =  await axios.post(baseUrl,newObject,config)\r\n        return response.data\r\n    } catch(error) {\r\n    }\r\n}\r\n\r\n\r\n\r\nconst updateRenovation = async (id, newObject) => {\r\n    const config = {\r\n        headers: {\r\n            Authorization: token\r\n        },\r\n        }\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject, config)\r\n    const response = await request\r\n    return response.data\r\n  }\r\n\r\nconst deleteRenovation = async (id) => {  \r\n    const config = {\r\n        headers: {\r\n            Authorization: token\r\n        },\r\n        }\r\n    const request = await axios.delete(`${baseUrl}/${id}`, config)\r\n    return request.data\r\n}  \r\n\r\n\r\n\r\n\r\nexport default {getRenovations, createRenovation, updateRenovation, deleteRenovation, setToken}","import renovationServices from '../../services/renovations'\r\nimport { useState, useEffect } from \"react\"\r\nimport './../../css/renovations.css'\r\n\r\n\r\nconst RenovationsList = ({notificationType, setNotificationType,confirmation, setConfirmation, notificationButtons, setNotificationButtons, notificationMessage, setNotificationMessage,renovationStartDate, user,setUser,renovations,setRenovations,showDetails,setShowDetails}) => {   // refaktoroi returni\r\n\r\n \r\n\r\n\r\n  useEffect(() => {\r\n    const loggedUser = window.localStorage.getItem('loggedUser')\r\n    if (loggedUser === 'undefined') {\r\n      window.localStorage.removeItem('loggedUser')\r\n      return\r\n    }\r\n    if (loggedUser) {\r\n        const user = JSON.parse(loggedUser)\r\n        setUser(user)\r\n       \r\n        renovationServices.setToken(user.token)\r\n\r\n        \r\n    }\r\n},[])\r\n\r\n\r\nuseEffect(() => {\r\n\r\n  renovationServices\r\n  .getRenovations()\r\n  .then(reno => {\r\n      setRenovations(reno)\r\n  })\r\n\r\n},[])\r\n\r\nconst renderTime = (timeToFix) => {\r\n  let convertedTime = new Date(timeToFix)\r\n  let date = convertedTime.getDate() + '-' +  (convertedTime.getMonth() + 1) + '-' +  convertedTime.getFullYear()\r\n  return date\r\n}      \r\n\r\n\r\n    const markFinished = (event) => {\r\n  \r\n        const id = event.target.value\r\n        const ren = renovations.find(reno => reno.id === id)\r\n       \r\n          if (renovationStartDate === '' && ren.status === false){\r\n            setNotificationType('error')\r\n            setNotificationMessage(\"Pick a finishing date from the calendar\")\r\n            setTimeout(() => {\r\n                setNotificationMessage(null)\r\n                setNotificationType('')\r\n            }, 5000)\r\n\r\n          } else {\r\n        if (ren.status === true){\r\n          const targetRenovation = { ...ren, status: !ren.status, finishedDate: null }\r\n          renovationServices\r\n          .updateRenovation(id, targetRenovation)\r\n            .then(reno => {\r\n            setRenovations(renovations.map(renovation => renovation.id !== id ? renovation : reno))\r\n            setNotificationType('succes')\r\n            setNotificationMessage(`Renovation ${targetRenovation.project} marked undone`)\r\n            setTimeout(() => {\r\n                setNotificationMessage(null)\r\n                setNotificationType('')\r\n            }, 5000)\r\n          })\r\n          .catch(error => {\r\n            setNotificationType('error')\r\n            setNotificationMessage(\"Missing renovation\")\r\n            setTimeout(() => {\r\n                setNotificationMessage(null)\r\n                setNotificationType('')\r\n            }, 5000)\r\n            setRenovations(renovations.filter(r => r.id !== id))\r\n          })\r\n\r\n        } else {\r\n  \r\n          const targetRenovation = { ...ren, status: !ren.status, finishedDate: renovationStartDate }\r\n          renovationServices\r\n          .updateRenovation(id, targetRenovation)\r\n            .then(reno => {\r\n            setRenovations(renovations.map(renovation => renovation.id !== id ? renovation : reno))\r\n            setNotificationType('succes')\r\n            setNotificationMessage(`Renovation ${targetRenovation.project} finished`)\r\n            setTimeout(() => {\r\n                setNotificationMessage(null)\r\n                setNotificationType('')\r\n            }, 5000)\r\n          })\r\n          .catch(error => {\r\n            setNotificationType('error')\r\n            setNotificationMessage(\"Missing renovation\")\r\n            setTimeout(() => {\r\n                setNotificationMessage(null)\r\n                setNotificationType('')\r\n            }, 5000)\r\n            setRenovations(renovations.filter(r => r.id !== id))\r\n          })\r\n        }\r\n\r\n        \r\n    \r\n  }\r\n\r\n}\r\n\r\n  const removeRenovation = (event)=> {\r\n    const id = event.target.value\r\n    let renoToRemove = renovations.find(maintenance => maintenance.id === id) \r\n    \r\n    if (window.confirm(`Do you really want to remove renovation \"${renoToRemove.project}\" `)){\r\n    renovationServices\r\n    .deleteRenovation(id)\r\n    setRenovations(renovations.filter(reno => reno.id !== id)) \r\n    setNotificationType('succes')\r\n    setNotificationMessage(`Succesfully removed renovation ${renoToRemove.project}`)\r\n    setTimeout(() => {\r\n        setNotificationMessage(null)\r\n        setNotificationType('')\r\n    }, 5000)\r\n    } else {\r\n        return\r\n    }\r\n\r\n\r\n}\r\n\r\n  const handleLongDetails = (event) => {\r\n    const id = event.target.value\r\n    const ren = renovations.find(reno => reno.id === id)\r\n    const targetRenovation = { ...ren, showDetails: !ren.showDetails}\r\n    renovationServices\r\n    .updateRenovation(id, targetRenovation)\r\n    .then(reno => {\r\n      setRenovations(renovations.map(renovation => renovation.id !== id ? renovation : reno))\r\n    })\r\n    .catch(error => {\r\n      alert('Errror, missing renovation!')\r\n      setRenovations(renovations.filter(r => r.id !== id))\r\n    })    \r\n  }\r\n\r\n  const countTotalCost = (a,b,c) => {\r\n    let totalCost = a+b+c\r\n    \r\n    return totalCost\r\n  }\r\n\r\n \r\n    return (\r\n    <div className='renovationList'>\r\n    <h1 className='renovationListHeader'>Renovations</h1>\r\n    <div>\r\n            <table name=\"renovations\">\r\n            <thead>\r\n              <tr>\r\n                <th name=\"project\">Project</th>\r\n                <th name=\"details\">Details</th>\r\n                <th name=\"contractor\">Contractor</th>\r\n                <th name=\"costs\">Work cost</th>\r\n                <th name=\"costs\">Material cost</th>\r\n                <th name=\"costs\">Other costs</th>\r\n                <th name=\"costs\">Total cost</th>\r\n                <th name=\"date\">Starting date</th>\r\n                <th name=\"date\">Finishing date</th>\r\n                <th name=\"status\">Status</th>\r\n                <th name=\"markStatus\">Mark done / undone</th>\r\n                <th name=\"delete\">Delete</th>\r\n              </tr>\r\n            </thead>\r\n              {renovations?.map((val, key) => {\r\n                return (\r\n                  <tbody>\r\n                  <tr key={key}>\r\n                    <td>{val.project}</td>\r\n                    {val.showDetails ?\r\n                    <td>{val.details}<button name=\"hide\" value={val.id}onClick={handleLongDetails}>Hide</button></td> :\r\n                    <td><button name=\"details\" value={val.id}onClick={handleLongDetails}>Show details</button></td>  \r\n                     \r\n                  }\r\n                    <td>{val.company}</td>\r\n                    <td>{val.workBudget}€</td>\r\n                    <td>{val.materialBudget}€</td>\r\n                    <td>{val.otherBudget}€</td>\r\n                    <td>{countTotalCost(Number(val.workBudget),Number(val.otherBudget),Number(val.materialBudget))}€</td>\r\n                    <td>{renderTime(val.startDate)}</td>\r\n                    {val.status?\r\n                    <td>{renderTime(val.finishedDate)}</td>:  \r\n                    <td>Not finished</td>            \r\n                  }\r\n                    {val.status ? \r\n                    <td name=\"statusDone\">Finished</td>:\r\n                    <td name=\"statusUndone\">Not finished</td>\r\n                  }\r\n                    {val.status ?\r\n                    <td><button name=\"undone\" value={val.id} onClick={markFinished}>Undone</button></td>:\r\n                    <td ><button name=\"done\" value={val.id} onClick={markFinished}>Done</button></td>\r\n                  }\r\n                     <td><button name=\"delete\" value={val.id} onClick={removeRenovation}>X</button></td>\r\n                  </tr>\r\n                  </tbody>\r\n                )\r\n              })}\r\n            </table>\r\n          </div>\r\n    </div>   \r\n    )\r\n  \r\n}\r\nexport default RenovationsList","\r\nimport './../css/notification.css'\r\n\r\n\r\nconst Notification = ({message,setMessage,setNotificationType, notificationType}) => {\r\n\r\n\r\n\r\n  \r\n    if (notificationType === 'error') {\r\n\r\n    if (message === null) {\r\n        return null\r\n    } else {\r\n        return (\r\n            <div className=\"errorNotification\">\r\n                <p>{message}</p>\r\n            </div>\r\n        )\r\n\r\n    } \r\n} else if (notificationType === 'succes') {\r\n\r\n    if (message === null) {\r\n        return null\r\n    } else {\r\n        return (\r\n            <div className=\"succesNotification\">\r\n                <p>{message}</p>\r\n            </div>\r\n        )\r\n\r\n    } \r\n\r\n} else if (notificationType === 'login') {\r\n\r\n    if (message === null) {\r\n        return null\r\n    } else {\r\n        return (\r\n            <div className=\"errorNotification\">\r\n                <p>{message}</p>\r\n            </div>\r\n        )\r\n    }\r\n\r\n} else {\r\n    return null\r\n}\r\n\r\n\r\n\r\n}\r\nexport default Notification","import { useState, useEffect } from \"react\"\r\nimport renovationService from '../../services/renovations'\r\nimport RenovationsList from \"./RenovationsList\"\r\nimport Calendar from 'react-calendar';\r\nimport Notification from \"../Notification\";\r\nimport './../../css/calendar.css'\r\n\r\n\r\n\r\n\r\n\r\nconst Renovations = ({notificationType, setNotificationType, confirmation, setConfirmation, notificationButtons, setNotificationButtons, notificationMessage, setNotificationMessage,user,setUser,renovations,setRenovations}) => {\r\n\r\n\r\n    const [project, setProject] = useState('')\r\n    const [details, setDetails] = useState('')\r\n    const [company, setcompany] = useState('')\r\n    const [date, setDate] = useState('')\r\n    const [workBudget,setWorkBudget] = useState(0)\r\n    const [materialBudget, setMaterialBudget] = useState(0)\r\n    const [otherBudget, setOtherBudget] = useState(0)\r\n    const [status, setStatus] = useState(false)\r\n    const [renovationStartDate, setRenovationStartDate] = useState('')\r\n    const [calendarDate, setCalenderDate] = useState('')\r\n    const [showDetails, setShowDetails] = useState(false)\r\n\r\n\r\n\r\n    \r\n    useEffect(() => {\r\n        renovationService.getRenovations().then(renovations => {\r\n          setRenovations(renovations)\r\n        })\r\n      },[])\r\n    \r\n\r\n    const addRenovation = (event) => {\r\n    \r\n        event.preventDefault()\r\n\r\n        let newReno = {\r\n            project: project,\r\n            details: details,\r\n            showDetails: showDetails,\r\n            company: company,\r\n            startDate: renovationStartDate,\r\n            finishedDate: null,\r\n            workBudget: workBudget,\r\n            materialBudget: materialBudget,\r\n            otherBudget: otherBudget,\r\n            status: status,\r\n\r\n        }\r\n        if (project === ''){\r\n          setNotificationType('error')\r\n          setNotificationMessage(\"Project must have a name\")\r\n          setTimeout(() => {\r\n              setNotificationMessage(null)\r\n              setNotificationType('')\r\n          }, 5000)\r\n\r\n        } else if (details === ''){\r\n          setNotificationType('error')\r\n          setNotificationMessage(\"Project must have details\")\r\n          setTimeout(() => {\r\n              setNotificationMessage(null)\r\n              setNotificationType('')\r\n          }, 5000)\r\n\r\n        } else if (company === '') {\r\n          setNotificationType('error')\r\n          setNotificationMessage(\"Project must have a contractor\")\r\n          setTimeout(() => {\r\n              setNotificationMessage(null)\r\n              setNotificationType('')\r\n          }, 5000)\r\n\r\n        } else if (renovationStartDate === ''){\r\n          setNotificationType('error')\r\n          setNotificationMessage(\"Project must have a starting date\")\r\n          setTimeout(() => {\r\n              setNotificationMessage(null)\r\n              setNotificationType('')\r\n          }, 5000)\r\n\r\n        } else {\r\n          setNotificationType('succes')\r\n          setNotificationMessage(`New Project \"${newReno.project}\" added!`)\r\n          setTimeout(() => {\r\n              setNotificationMessage(null)\r\n              setNotificationType('')\r\n          }, 9000)\r\n          renovationService\r\n          .createRenovation(newReno)\r\n          .then(returnedReno => {\r\n              setRenovations(renovations.concat(returnedReno))\r\n              setProject('')\r\n              setDetails('')\r\n              setcompany('')\r\n              setWorkBudget(0)\r\n              setMaterialBudget(0)\r\n              setOtherBudget(0)    \r\n              setRenovationStartDate('')\r\n              \r\n          })\r\n         \r\n\r\n\r\n        }\r\n    }\r\n\r\n    const setDateToCalender = (time) => {\r\n      let properDate = time.getDate() + '-' +  (time.getMonth()) + '-' +  time.getFullYear()\r\n      setRenovationStartDate(time)\r\n      setCalenderDate(properDate)\r\n  }  \r\n\r\n    const handleProject = (event) => {\r\n        setProject(event.target.value)\r\n      }\r\n    const handleDetails = (event) => {\r\n        setDetails(event.target.value)\r\n    }\r\n    const handleCompany = (event) => {\r\n        setcompany(event.target.value)\r\n    }\r\n\r\n    const handleWorkBudget = (event) => {\r\n        setWorkBudget(event.target.value)\r\n    } \r\n    const handeMaterialBudget = (event) => {\r\n      setMaterialBudget(event.target.value)\r\n  } \r\n  const handleOtherBudget = (event) => {\r\n    setOtherBudget(event.target.value)\r\n} \r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n                          \r\n\r\n            <h1 className=\"renovationsHeader\" >Renovations</h1>\r\n            <Notification setNotificationType={setNotificationType} notificationType={notificationType} message={notificationMessage} buttons={notificationButtons}/>\r\n\r\n           <h3 className=\"addRenovationsHeader\">Add a new renovation</h3>\r\n\r\n              <form  onSubmit={addRenovation}>\r\n              <div className=\"addRenovationForm\">\r\n                <p>\r\n                <label className=\"label\">Project: </label>\r\n                <input className=\"inputfield\" value={project} onChange={handleProject}/><br />\r\n                <label className=\"label\" >Details:</label>    \r\n                <textarea className=\"textArea\" value={details} onChange={handleDetails}/><br />\r\n                <label className=\"label\">Contractor:</label>\r\n                <input className=\"inputfield\" value={company} onChange={handleCompany}/><br />\r\n                <label className=\"label\">Work cost:</label>\r\n                <input className=\"inputfield\" type=\"number\" min=\"0\" value={workBudget} onChange={handleWorkBudget}/><br />\r\n                <label className=\"label\">Material cost:</label>\r\n                <input className=\"inputfield\" type=\"number\" min=\"0\" value={materialBudget} onChange={handeMaterialBudget}/><br />\r\n                <label className=\"label\">Other costs:</label>\r\n                <input className=\"inputfield\" type=\"number\" min=\"0\" value={otherBudget} onChange={handleOtherBudget}/><br />            \r\n                </p>         \r\n                <div className=\"calendarPostion\">   \r\n\r\n                <label className=\"label\">Project start date:</label> <span className=\"label\">{calendarDate}</span><br />  \r\n                <button className=\"addRenovationButton\" type=\"submit\">Add a new renovation</button>  \r\n                <Calendar onChange={setDateToCalender} value={renovationStartDate}/>\r\n\r\n                </div>  \r\n                </div>  \r\n\r\n              </form> \r\n\r\n           \r\n            \r\n            <RenovationsList setNotificationType={setNotificationType} notificationType={notificationType} confirmation={confirmation} setConfirmation={setConfirmation} notificationButtons={notificationButtons} setNotificationButtons={setNotificationButtons} notificationMessage={notificationMessage} setNotificationMessage={setNotificationMessage} renovationStartDate={renovationStartDate} calendarDate={calendarDate} showDetails={showDetails} setShowDetails={setShowDetails} renovations={renovations} setRenovations={setRenovations} user={user} setUser={setUser}/>        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Renovations","import axios from 'axios'\r\n\r\n//const baseUrl = 'http://localhost:3001/maintenances'\r\nconst baseUrl = '/maintenances'\r\n\r\nlet token = null\r\n\r\nconst setToken = newToken => {\r\n\r\n    token = `bearer ${newToken}`\r\n}\r\n\r\nconst getMaintenances =  async id => {\r\n    const config = {\r\n        headers: {\r\n            Authorization: token\r\n        },\r\n        }\r\n\r\n    try {\r\n        const response =  await axios.get(baseUrl,config)\r\n        return response.data\r\n    } catch(error) {\r\n\r\n    }\r\n    \r\n}\r\n\r\n\r\nconst createMaintenance = async newObject => {\r\n    const config = {\r\n        headers: {\r\n            Authorization: token\r\n        },\r\n        }\r\n\r\n    try {\r\n        const response =  await axios.post(baseUrl,newObject,config)\r\n\r\n        return response.data\r\n    } catch(error) {\r\n\r\n    }\r\n}\r\nconst updateMaintenance = async (id, newObject) => {\r\n    const config = {\r\n        headers: {\r\n            Authorization: token\r\n        },\r\n        }\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject, config)\r\n    const response = await request\r\n    return response.data\r\n  }\r\n\r\n  const getById = async (id) => {\r\n    const request = await axios.get(`${baseUrl}/${id}`)\r\n    return request.data\r\n  }\r\n\r\nconst deleteMaintenance = async (id) => {  \r\n    const config = {\r\n        headers: {\r\n            Authorization: token\r\n        },\r\n        }\r\n    const request = await axios.delete(`${baseUrl}/${id}`,config)\r\n    return request.data\r\n}\r\n\r\nexport default {getMaintenances, createMaintenance, updateMaintenance, deleteMaintenance, getById, setToken}","import axios from 'axios'\r\n\r\n//const baseUrl = 'http://localhost:3001/completedMaintenances'\r\nconst baseUrl = '/completedMaintenances'\r\n\r\nlet token = null\r\n\r\nconst setToken = newToken => {\r\n\r\n    token = `bearer ${newToken}`\r\n}\r\n\r\nconst getCompletedMaintenances =  async id => {\r\n    const config = {\r\n        headers: {\r\n            Authorization: token\r\n        },\r\n        }\r\n\r\n\r\n    try {\r\n        const response =  await axios.get(baseUrl,config)\r\n        return response.data\r\n    } catch(error) {\r\n\r\n    }\r\n    \r\n}\r\n\r\n\r\nconst createCompletedMaintenance = async newObject => {\r\n    const config = {\r\n        headers: {\r\n            Authorization: token\r\n        },\r\n        }\r\n\r\n    try {\r\n        const response =  await axios.post(baseUrl,newObject,config)\r\n\r\n        return response.data\r\n    } catch(error) {\r\n\r\n    }\r\n}\r\nconst updateCompletedMaintenance = async (id, newObject) => {\r\n\r\n    const config = {\r\n        headers: {\r\n            Authorization: token\r\n        },\r\n        }\r\n        try {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject, config)\r\n    const response = await request\r\n    return response.data\r\n  } catch(error){\r\n      \r\n  }\r\n  }\r\n\r\n  const getById = async (id) => {\r\n    const request = await axios.get(`${baseUrl}/${id}`)\r\n    return request.data\r\n  }\r\n\r\nconst deleteCompletedMaintenance = async (id) => {  \r\n    const config = {\r\n        headers: {\r\n            Authorization: token\r\n        },\r\n        }\r\n    const request = await axios.delete(`${baseUrl}/${id}`,config)\r\n    return request.data\r\n}\r\n\r\nexport default {getCompletedMaintenances, createCompletedMaintenance, updateCompletedMaintenance, deleteCompletedMaintenance, getById, setToken}","import { useState, useEffect } from \"react\"\r\nimport maintenanceServices from '../../services/maintenances'\r\nimport Calendar from 'react-calendar'\r\nimport Select from 'react-select'\r\nimport Notification from \"../Notification\"\r\nimport 'react-calendar/dist/Calendar.css'\r\nimport completedMaintenanceServices from '../../services/completedMaintenances'\r\nimport './../../css/calendar.css'\r\n\r\n\r\n\r\n\r\n\r\nconst MaintenanceList = ({notificationType,setNotificationType,setNotificationMessage,notificationMessage, completedTasks,setCompletedTasks,taskList,setTaskList,user,setUser}) => {\r\n\r\n\r\n    const [task, setTask] = useState('')\r\n    const [when, setWhen] = useState(0)\r\n    const [lastTimeDone, setLastDoneTime] = useState('')\r\n    const [cost, setCost] = useState(0)\r\n    const [calendarDate, setCalenderDate] = useState(null)\r\n\r\n    const [oneTimeTask, setOneTimeTask] = useState(true)\r\n \r\n\r\n    let today = new Date()\r\n    let dateNow = today.getDate() + '-' +  (today.getMonth() + 1) + '-' +  today.getFullYear()\r\n\r\n    useEffect(() => {\r\n        const loggedUser = window.localStorage.getItem('loggedUser')\r\n        if (loggedUser === 'undefined') {\r\n          window.localStorage.removeItem('loggedUser')\r\n          return\r\n        }\r\n        if (loggedUser) {\r\n            const user = JSON.parse(loggedUser)\r\n            setUser(user)\r\n            maintenanceServices.setToken(user.token)\r\n            \r\n        }\r\n    },[])\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        maintenanceServices\r\n        .getMaintenances()\r\n        .then(maintenance => {\r\n            setTaskList(maintenance)\r\n        })\r\n\r\n      },[]) \r\n\r\n      useEffect(() => {\r\n\r\n        completedMaintenanceServices\r\n        .getCompletedMaintenances()\r\n        .then(maintenance => {\r\n            setCompletedTasks(maintenance)\r\n        })\r\n    \r\n      },[])\r\n\r\n\r\n\r\n\r\n\r\nconst renderTime = (timeWhenTaskIsDone) => {\r\n    let convertedTime = new Date(timeWhenTaskIsDone)\r\n    let date = convertedTime.getDate() + '-' +  (convertedTime.getMonth() + 1) + '-' +  convertedTime.getFullYear()\r\n    return date\r\n}      \r\n\r\nconst countTimeLeftToDoTask = (taskDone,howOften) => {\r\n    const dateWhenTaskDone = new Date(taskDone)\r\n    const today = new Date()\r\n    const one_day = 1000*60*60*24;\r\n    let result = Math.ceil((today.getTime()-dateWhenTaskDone.getTime())/(one_day))\r\n    let timeToDoCurrentTask = howOften - (result)\r\n\r\n    if (timeToDoCurrentTask > 0){\r\n        return ' You have ' + timeToDoCurrentTask + ' days to do this!'\r\n    } else if (timeToDoCurrentTask < 0) {\r\n        return 'You are ' + Math.abs(timeToDoCurrentTask) + ' days late!'\r\n    } else {\r\n        return  'You should do this today!'\r\n        //Math.abs(timeToDoCurrentTask)\r\n    }\r\n    \r\n}     \r\n\r\nconst setDateToCalender = (time) => {\r\n    let properDate = time.getDate() + '-' +  (time.getMonth() + 1) + '-' +  time.getFullYear()\r\n    setLastDoneTime(time)\r\n    setCalenderDate(properDate)\r\n}     \r\n\r\n\r\nconst markAsDone = (event) => {\r\n    event.preventDefault()\r\n\r\n    let newPrice = 0\r\n    const id = event.target.value\r\n    const mainte = taskList.find(maintenance => maintenance.id === id)\r\n \r\n\r\n    newPrice = mainte.cost\r\n    if (lastTimeDone === ''){\r\n   \r\n        setNotificationType('error')\r\n        setNotificationMessage(`Pick a date from the calendar`)\r\n        setTimeout(() => {\r\n            setNotificationMessage(null)\r\n            setNotificationType('')\r\n        }, 5000)\r\n\r\n        return\r\n    } \r\n    if (!window.confirm(`Is the old price ${mainte.cost}€ right`)){\r\n        newPrice = window.prompt('New price')\r\n    }\r\n    if (lastTimeDone === ''){\r\n        alert('Pick a date from the calendar')\r\n\r\n        return\r\n    } \r\n    if (lastTimeDone > new Date()) {\r\n        alert(\"You probably don't have a time machine, pick a proper date...\")\r\n        return\r\n    }\r\n\r\n\r\n\r\n    let targetMaintenanceDate = { ...mainte, cost: newPrice, lastTime: new Date(lastTimeDone) }\r\n    maintenanceServices\r\n    .updateMaintenance(id, targetMaintenanceDate)\r\n      .then(mainte => {\r\n          setTaskList(taskList.map(maintenance => maintenance.id !== id ? maintenance : mainte))  \r\n    })\r\n    .catch(error => {\r\n      alert('virhe, maintenance puuttuu ' , error)\r\n \r\n    }) \r\n   \r\n\r\n    let newOnetimeTask = {\r\n        task: mainte.task,\r\n        lastTime: lastTimeDone,\r\n        cost: newPrice\r\n\r\n    }\r\n\r\n\r\n\r\n    completedMaintenanceServices\r\n   .createCompletedMaintenance(newOnetimeTask)\r\n   .then(maintenance => {\r\n       setCompletedTasks(completedTasks.concat(maintenance))\r\n   })\r\n    \r\n   \r\n}\r\n \r\n\r\n\r\nconst removeMaintenance = (event)=> {\r\n    const id = event.target.value\r\n    let taskToBeRemoved = taskList.find(maintenance => maintenance.id === id) \r\n    if (window.confirm(`Do you really want to remove maintenance \"${taskToBeRemoved.task}\" `)){\r\n    maintenanceServices\r\n    .deleteMaintenance(id)\r\n    setTaskList(taskList.filter(maintenance => maintenance.id !== id)) \r\n    setNotificationType('succes')\r\n    setNotificationMessage(`Active task ${taskToBeRemoved.task} removed succesfully`)\r\n    setTimeout(() => {\r\n        setNotificationMessage(null)\r\n        setNotificationType('')\r\n    }, 5000)\r\n    \r\n    } else {\r\n        return\r\n    }\r\n\r\n   \r\n}\r\nconst removeCompletedMaintenance = (event)=> {\r\n    const id = event.target.value\r\n    let taskToBeRemoved = completedTasks.find(maintenance => maintenance.id === id) \r\n    if (window.confirm(`Do you really want to remove maintenance \"${taskToBeRemoved.task}\" `)){\r\n        completedMaintenanceServices\r\n    .deleteCompletedMaintenance(id)\r\n    setCompletedTasks(completedTasks.filter(maintenance => maintenance.id !== id)) \r\n    setNotificationType('succes')\r\n    setNotificationMessage(`Completed task ${taskToBeRemoved.task} removed succesfully`)\r\n    setTimeout(() => {\r\n        setNotificationMessage(null)\r\n        setNotificationType('')\r\n    }, 5000)\r\n    } else {\r\n        return\r\n    }\r\n\r\n   \r\n}\r\n\r\nconst handleTask = (event) => {\r\n    setTask(event.target.value)\r\n\r\n}\r\nconst handleWhen = (event) => {\r\n    setWhen(event.target.value)\r\n    \r\n}\r\n\r\nconst handleCost = (event) => {\r\n    setCost(event.target.value)\r\n    \r\n}\r\n\r\nconst addTask = (event) => {\r\n    event.preventDefault()\r\n    let newTask = {\r\n        task: task,\r\n        when: when,\r\n        lastTime: lastTimeDone,\r\n        cost: cost\r\n\r\n    }\r\n    let newOnetimeTask = {\r\n        task: task,\r\n        lastTime: lastTimeDone,\r\n        cost: cost\r\n\r\n    }\r\n\r\n\r\n   \r\n        if (task === '') {         \r\n            setNotificationType('error')\r\n            setNotificationMessage('Task must have a name')\r\n            setTimeout(() => {\r\n                setNotificationMessage(null)\r\n                setNotificationType('')\r\n            }, 5000)\r\n        } else if (lastTimeDone === ''){\r\n            setNotificationType('error')\r\n            setNotificationMessage('Date is empty, choose a date from the calendar')\r\n            setTimeout(() => {\r\n            setNotificationMessage(null)\r\n            setNotificationType('')\r\n        }, 5000)\r\n        return\r\n        } else if (!lastTimeDone instanceof Date) {\r\n            setNotificationType('error')\r\n            setNotificationMessage('Date must be in correct format, choose a date from the calendar')\r\n            setTimeout(() => {\r\n            setNotificationMessage(null)\r\n            setNotificationType('')\r\n        }, 5000)\r\n        return\r\n        } else if (lastTimeDone > new Date()) {\r\n            setNotificationType('error')\r\n            setNotificationMessage(\"You probably don't have a time machine, pick a proper date...\")\r\n            setTimeout(() => {\r\n            setNotificationMessage(null)\r\n            setNotificationType('')\r\n        }, 5000)\r\n        return\r\n        \r\n        }else {\r\n            if (oneTimeTask === false) {\r\n                maintenanceServices\r\n                .createMaintenance(newTask)\r\n                .then(maintenance => {\r\n                    setTaskList(taskList.concat(maintenance))\r\n                    setTask('')\r\n                    setWhen(0)\r\n                    setLastDoneTime('')    \r\n                    setCost(0)\r\n                })\r\n            \r\n            \r\n                setTaskList(taskList.concat(newTask))\r\n                setNotificationType('succes')\r\n                setNotificationMessage(`Active task \"${newTask.task}\" succesully created!`)\r\n                setTimeout(() => {\r\n                setNotificationMessage(null)\r\n                setNotificationType('')\r\n            }, 5000)\r\n\r\n            } else {\r\n                completedMaintenanceServices\r\n                .createCompletedMaintenance(newOnetimeTask)\r\n                .then(maintenance => {\r\n                    setCompletedTasks(completedTasks.concat(maintenance))\r\n                    setTask('')\r\n                    setLastDoneTime('')    \r\n                    setCost(0)\r\n                })\r\n                setNotificationType('succes')\r\n                setNotificationMessage(`One time task \"${newOnetimeTask.task}\" succesully created!`)\r\n                setTimeout(() => {\r\n                setNotificationMessage(null)\r\n                setNotificationType('')\r\n            }, 5000)\r\n            }\r\n\r\n    }\r\n}\r\n\r\n    \r\n\r\n\r\nconst actions = [\r\n    {label: \"One time\", value: 1, color: \"#eeb086\"},\r\n    {label: \"Active\", value: 2, color: \"#eeb086\"}\r\n]\r\n\r\nconst handleSelect = (event) => {\r\n    if (event.label === 'One time'){\r\n        setOneTimeTask(true)\r\n    } else {\r\n        setOneTimeTask(false)\r\n    }\r\n\r\n}\r\n\r\n\r\n    return (\r\n        <div>      \r\n            <Notification setNotificationType={setNotificationType} notificationType={notificationType} message={notificationMessage} />\r\n            <div className=\"addMaintenanceForm\">       \r\n            <form  onSubmit={addTask}>\r\n                <div>          \r\n                <h2 className=\"addNewTaskHeader\">Add a new task</h2>\r\n                <h3 className=\"date\">Today is: {dateNow}</h3>\r\n                <p>\r\n                <label>Choose one time task or active task:</label>\r\n                <Select className=\"selector\" onChange={handleSelect} options={actions} defaultValue = {{ label: \"One Time\" , value: 1}}/>\r\n                <p>*One time tasks are task which you have already \"done\".</p>\r\n                <p>*Active tasks are ongoing tasks which you mark \"done\" whenever you do the task.</p>\r\n                <label>Task:</label><input value={task}  onChange={handleTask}></input> <br />\r\n                {oneTimeTask === false &&\r\n                <div>\r\n                <label>How often</label><input value={when} type=\"number\" min=\"0\" onChange={handleWhen}></input>\r\n                <p>*Put the number of the days here when the task should be done</p>\r\n                </div>\r\n                }\r\n                <label>Date when task is done:</label> <span className=\"chosenDate\">{calendarDate}</span>\r\n                <Calendar className=\"calendar\" onChange={setDateToCalender} /> \r\n                <label>Cost: </label> <input  name=\"cost\" type=\"number\" min=\"0\" value={cost} onChange={handleCost}></input><br />\r\n                <p>*Put the cost here only if it's a taxrefundable</p>\r\n                <button className=\"addTaskButton\" type=\"submit\">Add a new task</button>              \r\n                </p>\r\n                </div>\r\n            </form>  \r\n   \r\n            </div>\r\n            <div className=\"completedTaskList\">\r\n                <h1 className=\"completedTasksHeader\">Completed Tasks</h1>\r\n                        <table name=\"completedTasks\">\r\n                        <thead>\r\n                          <tr>\r\n                            <th name=\"number\">#</th>\r\n                            <th name=\"task\">Task</th>\r\n                            <th name=\"lastTimeDone\">Last time done</th>\r\n                            <th name=\"cost\">Cost</th>\r\n                            <th name=\"delete\">Delete</th>\r\n                          </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                          {completedTasks.map((val,index) => {\r\n                            return (                      \r\n                              <tr key={val.id}>\r\n                                <td name=\"number\">{index+1}</td>\r\n                                <td>{val.task}</td>\r\n                                <td>{renderTime(val.lastTime)}</td>\r\n                                <td>{val.cost}€</td>\r\n                                <td name=\"delete\"><button name=\"delete\" value={val.id} onClick={removeCompletedMaintenance}>X</button></td>\r\n                              </tr>                             \r\n                            )\r\n                          })}\r\n                           </tbody>\r\n                        </table>\r\n                        <div className=\"footer\"></div>\r\n            </div> \r\n            \r\n\r\n\r\n        <div className=\"tasksBackground\">\r\n          <div className=\"activeTaskList\">\r\n          <h1 className=\"activeTaskListHeader\">Active task list</h1>\r\n            <table name=\"activeTasks\">\r\n            <thead>\r\n              <tr>\r\n                <th name=\"number\">#</th>\r\n                <th name=\"task\">Task</th>\r\n                <th name=\"howOften\">How often task should be done (days)</th>\r\n                <th name=\"lastTimeDone\">Last time done</th>\r\n                <th name=\"timeToDoTask\">Time to do this task</th>\r\n                <th name=\"cost\">Cost</th>\r\n                <th name=\"checkDone\">Check done</th>\r\n                <th name=\"delete\">Delete</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {taskList?.map((val,index) => {\r\n                return (        \r\n                  <tr key={val.id}>\r\n                    <td>{index+1}</td>\r\n                    <td>{val.task}</td>\r\n                    <td>{val.when}</td>\r\n                    <td>{renderTime(val.lastTime)}</td>\r\n                    <td>{countTimeLeftToDoTask(val.lastTime, val.when)}</td>\r\n                    <td>{val.cost}€</td>\r\n                    <td><button name=\"checkDone\" value={val.id} onClick={markAsDone}>done</button></td>\r\n                    <td><button name=\"delete\" value={val.id} onClick={removeMaintenance}>X</button></td>\r\n                  </tr>      \r\n                )\r\n              })}\r\n              </tbody> \r\n            </table>\r\n \r\n          </div>\r\n          </div>\r\n \r\n        \r\n        </div>     \r\n    )      \r\n\r\n}\r\n\r\n\r\n\r\nexport default MaintenanceList","import { useState, useEffect } from \"react\"\r\nimport MaintenanceBar from './MaintenanceBar.js'\r\nimport MaintenanceList from './MaintenanceList'\r\nimport './../../css/maintenances.css'\r\n\r\n\r\nconst Maintenances = ({setNotificationType,notificationType,notificationMessage,setNotificationMessage,completedTasks,setCompletedTasks,taskList,setTaskList,user,setUser}) => {\r\n\r\n    \r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"maintenancesHeader\">Maintenances</h1>\r\n    \r\n            <div>\r\n                <MaintenanceList key={taskList} notificationType={notificationType} setNotificationType={setNotificationType} notificationMessage={notificationMessage} setNotificationMessage={setNotificationMessage}  completedTasks={completedTasks} setCompletedTasks={setCompletedTasks} taskList={taskList} setTaskList={setTaskList} user={user} setUser={setUser}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Maintenances\r\n\r\n","import { useState, useEffect } from \"react\"\r\nimport maintenanceServices from './../../services/maintenances'\r\nimport renovationServices from './../../services/renovations'\r\nimport completedMaintenanceServices from './../../services/completedMaintenances'\r\nimport './../../css/money.css'\r\n\r\nconst Money = ({completedTasks,setCompletedTasks,taskList,renovations, setTaskList, setRenovations}) => {\r\n\r\n\r\n    const [taxRefund, setTaxRefund] = useState(0)\r\n    const [waterBills, setWaterBills] = useState([])\r\n    const [electricityBills, setElectricityBills] = useState([])\r\n\r\n    const thisYear = new Date().getFullYear()\r\n\r\n    useEffect(() => {\r\n        maintenanceServices\r\n        .getMaintenances()\r\n        .then(maintenance => {\r\n            setTaskList(maintenance)\r\n        })\r\n      },[])\r\n\r\n      useEffect(() => {\r\n        completedMaintenanceServices\r\n        .getCompletedMaintenances()\r\n        .then(maintenance => {\r\n            setCompletedTasks(maintenance)\r\n        })\r\n      },[])\r\n\r\n      useEffect(() => {\r\n        renovationServices\r\n        .getRenovations()\r\n        .then(renovations => {\r\n          setRenovations(renovations)\r\n        })\r\n      },[])\r\n\r\n     \r\n    const totalMoneyUsed = () => {\r\n        let renovationCosts = countTotalMoneyUsedRenovations()\r\n        let maintenanceCosts = countTotalMoneyUsedMaintenances()\r\n        let totalMoneySpend = (Number(renovationCosts) + Number(maintenanceCosts))\r\n        return totalMoneySpend.toFixed(2)\r\n    }  \r\n\r\n    const countTotalMoneyUsedMaintenances = () => {\r\n        let totalMoneySpend = 0\r\n        completedTasks.forEach(maintenance => {\r\n            totalMoneySpend = totalMoneySpend + maintenance.cost\r\n        })\r\n        return totalMoneySpend.toFixed(2)\r\n    }  \r\n\r\n    const countTotalMoneyUsedRenovations = () => {\r\n        let totalMoneySpend = 0\r\n        renovations.forEach(renovation => {\r\n            totalMoneySpend = totalMoneySpend + renovation.workBudget + renovation.materialBudget + renovation.otherBudget\r\n\r\n        })\r\n        return totalMoneySpend.toFixed(2)\r\n\r\n    } \r\n    const countMoneySpendOnRenovationsThisYear = () => {\r\n        let renovationsThisYear = 0\r\n\r\n        renovations.forEach(renovation => {\r\n            let renovationYear = new Date(renovation.startDate)\r\n\r\n            if (thisYear === renovationYear.getFullYear()){\r\n\r\n                renovationsThisYear = renovationsThisYear + renovation.workBudget + renovation.materialBudget + renovation.otherBudget\r\n            }\r\n        })\r\n        return renovationsThisYear.toFixed(2)\r\n    }\r\n\r\n    const countMoneySpendOnMaintenancesThisYear = () => {\r\n        let maintenancesThisYear = 0\r\n\r\n        completedTasks.forEach(task => {\r\n            let taskYear = new Date(task.lastTime)\r\n            if (thisYear === taskYear.getFullYear()) {\r\n                maintenancesThisYear = maintenancesThisYear + task.cost\r\n            }\r\n        })\r\n        return maintenancesThisYear.toFixed(2)\r\n    }\r\n\r\n\r\n\r\n    const countTaxRefund = () => {   // hae myös maintenancest\r\n        let totalRenovationCost = 0\r\n        renovations.forEach(renovation => {   \r\n            let renovationYear = new Date(renovation.startDate)\r\n          \r\n            if (thisYear === renovationYear.getFullYear()) {\r\n                totalRenovationCost = totalRenovationCost + renovation.workBudget\r\n            }\r\n        })\r\n        \r\n        let totalMaintenanceCost = 0\r\n        completedTasks.forEach(maintenance => {\r\n            let maintenanceYear = new Date(maintenance.lastTime)\r\n            if (thisYear === maintenanceYear.getFullYear()) {       \r\n                totalMaintenanceCost = totalMaintenanceCost + maintenance.cost\r\n            }\r\n        })\r\n        const totalRefund = (totalRenovationCost + totalMaintenanceCost) * 0.4 - 100\r\n        if (totalRefund > 2250) {\r\n            return 2250\r\n        } else if (totalRefund < 0) {\r\n            return 0\r\n        } else {\r\n            return totalRefund.toFixed(2)\r\n        }\r\n    \r\n\r\n    }\r\n    \r\n\r\n    return (\r\n        <div to=\"/Money\">\r\n            <div>\r\n            <h1 className=\"moneyHeader\">Money</h1>\r\n            <table name=\"total\">\r\n            <thead>\r\n            <h2 className=\"totalHeader\">Total</h2>\r\n              <tr>\r\n                <th name=\"renovations\">Renovations</th>\r\n                <th name=\"tasks\">Maintenances</th>\r\n                <th name=\"shopping\">Shopping</th>\r\n                <th name=\"bills\">Bills</th>\r\n                <th name=\"totalMoneySpend\">Total money spend</th>\r\n\r\n              </tr>\r\n            </thead>\r\n               <tr >\r\n                <td name=\"totalMoneySpendRenovations\">{countTotalMoneyUsedRenovations()}€</td>\r\n                <td name=\"totalMoneySpendMaintenances\">{countTotalMoneyUsedMaintenances()}€</td>\r\n                <td>-</td>\r\n                <td>-</td>\r\n                <td name=\"totalMoneySpend\">{totalMoneyUsed()}</td>\r\n              </tr>\r\n\r\n            </table>\r\n            </div>\r\n            <div>\r\n            <table name=\"thisYear\">         \r\n            <thead> \r\n            <h2 className=\"thisYearHeader\">This year</h2>\r\n              <tr>\r\n                <th name=\"renovationsThisYear\">Renovations this year</th>\r\n                <th name=\"maintenancesThisYear\">Maintenances this year</th>\r\n                <th name=\"shoppingThisYear\">Shopping this year</th>\r\n                <th name=\"billsThisYear\">Bills this year</th>\r\n                <th name=\"totalMoneySpendThisYear\">Total money spend this year</th>\r\n\r\n              </tr>\r\n            </thead>\r\n               <tr >\r\n                <td name=\"moneySpendRenovationsThisYear\">{countMoneySpendOnRenovationsThisYear()}€</td>\r\n                <td name=\"moneySpendMaintenancesThisYear\">{countMoneySpendOnMaintenancesThisYear()}€</td>\r\n                <td>-</td>\r\n                <td>-</td>\r\n                <td>-</td>\r\n              </tr>\r\n\r\n            </table>\r\n            </div>\r\n            <h2 className=\"taxRefundThisYearHeader\">Tax refund this year</h2>\r\n            <h3 className=\"taxRefundThisYearAmount\">{countTaxRefund()}€</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Money","import axios from 'axios'\r\n\r\n\r\n//const baseUrl = 'http://localhost:3001/login'\r\nconst baseUrl = '/login'\r\n\r\n\r\n\r\nconst login = async credentials => {\r\n    try {\r\n        const response =  await axios.post(baseUrl,credentials)\r\n        if (typeof response.data.username !== 'undefined') {\r\n            return response.data\r\n        } else {\r\n            \r\n        }\r\n    }catch(error) {\r\n\r\n            }\r\n\r\n        }\r\n       \r\n   \r\n\r\n\r\nexport default {login}","import { useState, useEffect } from \"react\"\r\nimport { Route, Link, useHistory} from \"react-router-dom\"\r\nimport loginServices from '../../services/login'\r\nimport maintenanceServices from  '../../services/maintenances'\r\nimport renovationServices from  '../../services/renovations'\r\nimport completedMaintenanceServices from '../../services/completedMaintenances'\r\nimport Notification from \"../Notification\"\r\nimport './../../css/login.css'\r\n\r\n\r\n\r\nconst Login = ({notificationType, setNotificationType,notificationButtons, setNotificationButtons, notificationMessage, setNotificationMessage, user,showCreateUserForm,setShowCreateUserForm,loginStatus,setLoginStatus,setLoggedInUser,setUser,username,password,setUsername,setPassword})  => {\r\n\r\n    const [showLoginForm, setShowLoginForm] = useState(false)\r\n\r\n\r\n    const history = useHistory()\r\n\r\n\r\n      const logOut = () => {\r\n      if (localStorage.length > 0) {\r\n          \r\n       }\r\n      window.localStorage.removeItem('loggedUser')\r\n      setUser(null)\r\n      setLoggedInUser('')\r\n      setLoginStatus(false)\r\n      history.push(\"/\")\r\n    }\r\n\r\n    const handleLogin = async (event) => {\r\n        event.preventDefault()\r\n        if (username === ''){\r\n            setNotificationMessage(\"Username can't be empty\")\r\n            setNotificationType('login')\r\n            setTimeout(() => {\r\n                setNotificationMessage(null)\r\n                setNotificationType('')\r\n            }, 5000)\r\n           // alert(\"Username can't be empty\")\r\n            return \r\n        } else if (password === ''){\r\n            setNotificationMessage(\"Password can't be empty\")\r\n            setNotificationType('login')\r\n            setTimeout(() => {\r\n                setNotificationMessage(null)\r\n                setNotificationType('')\r\n            }, 7000)\r\n        } else {\r\n\r\n        try{\r\n        const user = await loginServices\r\n        .login({\r\n            username,password\r\n        })\r\n        window.localStorage.setItem(\r\n            'loggedUser', JSON.stringify(user)\r\n        )\r\n        completedMaintenanceServices.setToken(user.token)\r\n        maintenanceServices.setToken(user.token)\r\n        renovationServices.setToken(user.token)\r\n        setLoginStatus(true)\r\n        setUser(user)\r\n        setUsername('')\r\n        setPassword('')\r\n        setLoggedInUser(user)\r\n        setShowCreateUserForm(false)\r\n        history.push(\"/kitchen\")\r\n        \r\n    \r\n\r\n    } catch(error){\r\n        setNotificationMessage(\"Wrong username or password\")\r\n        setTimeout(() => {\r\n            setNotificationMessage(null)\r\n        }, 7000) \r\n        history.push(\"/login\")\r\n    }\r\n}\r\n}\r\n\r\n    const handleUsername = (event) => {\r\n        setUsername(event.target.value)\r\n\r\n    }\r\n    const handlePassword = (event) => {\r\n        setPassword(event.target.value)\r\n    }\r\n\r\n    if (loginStatus !== false) {\r\n\r\n        return (\r\n            <></>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"loginPosition\">\r\n                <h2 className=\"Header\">Login</h2>\r\n                <form  onSubmit={handleLogin}>\r\n                    <div>\r\n                        <label className=\"label\">Username</label> \r\n                        <p><input className=\"inputFieldLogin\" value={username} type=\"text\" onChange={handleUsername}></input></p>\r\n                        <label className=\"label\">Password</label>\r\n                        <p><input className=\"inputFieldLogin\" value={password} type=\"password\" onChange={handlePassword}></input></p>\r\n                    </div>\r\n                    <button className=\"Button\" type=\"submit\">Login</button>\r\n                </form>\r\n                <Notification notificationType={notificationType} setNotificationType={setNotificationType} message={notificationMessage} buttons={notificationButtons}/>\r\n    \r\n    \r\n            </div>\r\n        )\r\n    }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\nexport default Login","import axios from 'axios'\r\n\r\n//const baseUrl = 'http://localhost:3001/users'\r\nconst baseUrl = '/users'\r\n\r\nconst createUser = async newUser => {\r\n    try {\r\n        const response =  await axios.post(baseUrl,newUser)\r\n        return response.data\r\n    } catch(error) {\r\n    }\r\n}\r\n\r\nexport default {createUser}","\r\nimport { useCallback } from \"react\"\r\nimport { useEffect, useState } from \"react\"\r\nimport { Route, Link, useHistory} from \"react-router-dom\"\r\nimport userService from '../../services/user'\r\nimport Header from '../Header'\r\nimport './../../css/login.css'\r\nimport Notification from \"../Notification\"\r\n\r\nconst CreateUserView = ({notificationType, setNotificationType, notificationMessage,setNotificationMessage,notificationButtons,setNotificationButtons,setShowCreateUserForm, setLoginStatus, user, setUser, username, password, setUsername, setPassword, setLoggedInUser}) => {\r\n\r\n    const [userList, setUserList] = useState([])\r\n    const [createUser, setCreateUser] = useState('')\r\n    const [createUsername, setCreateUsername] = useState('')\r\n    const [createPassword, setCreatePassword] = useState('')\r\n\r\n    const history = useHistory()\r\n\r\n    const handleCreateUser =  async (event) => {\r\n        event.preventDefault()\r\n        \r\n        const newUser = {\r\n            name: createUser,\r\n            username: createUsername,\r\n            password: createPassword      \r\n        }\r\n            if (createUsername.length < 3) {\r\n                setNotificationType('error')\r\n                setNotificationMessage(\"Username must be 3 or more characters long\")\r\n                setTimeout(() => {\r\n                    setNotificationMessage(null)\r\n                    setNotificationType('')\r\n                }, 5000)\r\n            } else if (createPassword.length < 3){\r\n                setNotificationType('error')\r\n                setNotificationMessage(\"Password must be 3 or more characters long\")\r\n                setTimeout(() => {\r\n                    setNotificationMessage(null)\r\n                    setNotificationType('')\r\n                }, 5000)\r\n            }  else {\r\n               userService\r\n               .createUser(newUser)\r\n              .then(user => {\r\n                 setUserList(userList.concat(user))\r\n                 setCreatePassword('')\r\n                 setCreateUsername('')\r\n                 setCreateUser(null)\r\n                 setLoginStatus(false)\r\n                 setShowCreateUserForm(false)\r\n\r\n        })\r\n        window.localStorage.removeItem('loggedUser')\r\n        setUser(null)\r\n        setLoggedInUser('')\r\n        setNotificationType('succes')\r\n        setNotificationMessage(`New user \"${newUser.name}\" succesfully created!`)\r\n        setTimeout(() => {\r\n            setNotificationMessage(null)\r\n            setNotificationType('')\r\n        }, 5000)\r\n        history.push(\"/\")\r\n    }\r\n    }\r\n    const handleUser = (event) => {\r\n        setCreateUser(event.target.value)\r\n\r\n    }\r\n\r\n    const handleUsername = (event) => {\r\n        setCreateUsername(event.target.value)\r\n\r\n    }\r\n    const handlePassword = (event) => {\r\n        setCreatePassword(event.target.value)\r\n    }\r\n    \r\n    return (\r\n        \r\n        <div className=\"loginPosition\">\r\n            <h2 className=\"Header\">Create a new user</h2>\r\n\r\n            <form  onSubmit={handleCreateUser}>\r\n                <div>\r\n                    <label className=\"label\">Full name</label>\r\n                    <p><input className=\"inputFieldFullName\" type=\"text\"  onChange={handleUser}></input></p>\r\n                    <label className=\"label\">Username</label>\r\n                    <p><input className=\"inputFieldUsername\" type=\"text\" name=\"Username\" value={createUsername} onChange={handleUsername}></input>\r\n                    <span className=\"minCharactersNotification\">min 3 characters</span></p>\r\n                    <label className=\"label\">Password</label>\r\n                    <p><input className=\"inputFieldPassword\"  type=\"password\" name=\"Password\" value={createPassword} onChange={handlePassword}></input>\r\n                    <span className=\"minCharactersNotification\">min 3 characters</span></p>\r\n                </div>\r\n                <button className=\"Button\" type=\"submit\">Create user</button>\r\n            </form>\r\n            <Notification notificationType={notificationType} setNotificationType={setNotificationType} message={notificationMessage} buttons={notificationButtons}/>\r\n\r\n\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default CreateUserView","import { Route, Link, useHistory} from \"react-router-dom\"\r\nimport './../../css/login.css'\r\n\r\n\r\nconst LogOut = ({user,loginStatus,setUser,loggedInUser,setLoggedInUser,setLoginStatus}) => {\r\n    const history = useHistory()\r\n    const logOut = () => {\r\n        if (!localStorage.length > 0) {          \r\n            return\r\n         }\r\n        window.localStorage.removeItem('loggedUser')\r\n        setUser(null)\r\n        setLoggedInUser('')\r\n        setLoginStatus(false)\r\n\r\n        history.push(\"/\")\r\n      }\r\n\r\n      return (\r\n\r\n        <div className=\"logOutPosition\">\r\n           <button className=\"logOutButton\" onClick={logOut} > LOG OUT</button>\r\n           {loginStatus === false ?\r\n       <span className='notLoggedInText' > Not logged in </span> : <span className='loggedInText'> Logged in as a  <span className='loggedInUser'> {loggedInUser.name}</span> </span>\r\n}    \r\n       </div>\r\n           //logout\r\n       )\r\n\r\n}\r\n\r\nexport default LogOut","import './css/header.css'\r\nimport './css/menubar.css'\r\n//import './css/renovations.css'\r\nimport {React ,useMemo,useTable, useEffect, useState } from \"react\"\r\nimport Vehicles from './components/Vehicles/vehicles'\r\nimport Header from './components/Header.js'\r\nimport Menubar from './components/Menubar.js'\r\nimport Kitchen from \"./components/Kitchen/Kitchen.js\"\r\nimport Freezer from \"./components/Kitchen/Freezer.js\"\r\nimport ShoppingList from \"./components/Kitchen/ShoppingList.js\"\r\nimport Renovations from \"./components/Renovations/Renovations.js\"\r\nimport Maintenances from \"./components/Maintenances/Maintenances.js\"\r\nimport Money from \"./components/Money/Money\"\r\nimport Login from \"./components/Login/Login\"\r\nimport CreateUserView from './components/Login/CreateUserView'\r\nimport LogOut from './components/Login/LogOut'\r\nimport renovationServices from './services/renovations'\r\nimport maintenanceServices from './services/maintenances'\r\nimport completedMaintenanceServices from './services/completedMaintenances'\r\nimport { Switch, Route } from 'react-router'\r\nimport './css/login.css'\r\nimport './css/table.css'\r\nimport './css/renovations.css'\r\nimport './css/maintenances.css'\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst App = () => {\r\n\r\n  \r\n  \r\n  const [user, setUser] = useState('')\r\n  const [username, setUsername] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [userID, setUserID] = useState('')\r\n  const [loggedInUser, setLoggedInUser] = useState('')\r\n  const [taskList, setTaskList] = useState([])\r\n  const [completedTasks,setCompletedTasks] = useState([])\r\n  const [renovations, setRenovations] = useState([])\r\n  const [showCreateUserForm,setShowCreateUserForm] = useState(false)\r\n  const [loginStatus, setLoginStatus] = useState(false)\r\n  const [notificationMessage, setNotificationMessage] = useState('')\r\n  const [notificationButtons, setNotificationButtons] = useState(false)\r\n  const [confirmation, setConfirmation] = useState(false)\r\n  const [notificationType, setNotificationType] = useState('')\r\n\r\n\r\n  useEffect(() => {\r\n    const loggedUser = window.localStorage.getItem('loggedUser')\r\n    if (loggedUser === 'undefined') {\r\n      window.localStorage.removeItem('loggedUser')\r\n      setLoginStatus(false)\r\n      return\r\n    }\r\n    if (loggedUser) {\r\n        const user = JSON.parse(loggedUser)\r\n        setUser(user)\r\n        setLoggedInUser(user)\r\n        setLoginStatus(true)\r\n                 \r\n        renovationServices.setToken(user.token)\r\n        maintenanceServices.setToken(user.token)\r\n        completedMaintenanceServices.setToken(user.token)\r\n        \r\n    }\r\n},[])\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    renovationServices\r\n    .getRenovations()\r\n    .then(reno => {\r\n        setRenovations(reno)\r\n    })\r\n\r\n  },[])\r\n\r\n\r\n\r\n  \r\n  useEffect(() => {\r\n\r\n    completedMaintenanceServices\r\n    .getCompletedMaintenances()\r\n    .then(maintenance => {\r\n        setCompletedTasks(maintenance)\r\n    })\r\n\r\n  },[])\r\n\r\n    \r\n  useEffect(() => {\r\n\r\n    maintenanceServices\r\n    .getMaintenances()\r\n    .then(maintenance => {\r\n        setTaskList(maintenance)\r\n    })\r\n\r\n  },[])\r\n\r\n\r\n\r\n\r\n    const toggleShowCreateUserForm = () => {\r\n      setShowCreateUserForm(!showCreateUserForm)\r\n    }\r\n    const buttonToShow =() => { // implement this\r\n\r\n      if (loginStatus === false ){\r\n        return (\r\n          <button>Create a new user</button>\r\n        )\r\n      }\r\n\r\n      if (loginStatus === true) {\r\n        return (\r\n          <button> logout</button>\r\n        )\r\n    } else if (loginStatus === false) {\r\n      return (\r\n        <button>login</button>\r\n      )\r\n    }\r\n  }\r\n\r\n  const showLoginAndCreate = () => {\r\n      if (loggedInUser){\r\n        return \r\n      } else {\r\n        return (\r\n          <div className='loginPosition'>\r\n          <button className=\"showLoginCreateUserButton\" onClick={toggleShowCreateUserForm}>\r\n          {showCreateUserForm === true ? <p className='loginText'>Login</p> : <p className='createNewUserText'>CREATE A NEW USER</p>}</button>\r\n          </div>\r\n        )\r\n      }\r\n  }\r\n\r\n\r\n// REFACTOR THIS\r\n  return (\r\n    <div className='backGround'>\r\n      \r\n      {loginStatus === true &&\r\n       <LogOut notificationType={notificationType} setNotificationType={setNotificationType} confirmation={confirmation} setConfirmation={setConfirmation} notificationButtons={notificationButtons} setNotificationButtons={setNotificationButtons} notificationMessage={notificationMessage} setNotificationMessage={setNotificationMessage} loginStatus={loginStatus}setLoginStatus={setLoginStatus}loggedInUser={loggedInUser} setLoggedInUser={setLoggedInUser} user={user} setUser={setUser}/>\r\n}\r\n\r\n      {loginStatus === true &&\r\n      <Menubar user={user} setUser={setUser}/>\r\n}    \r\n      <Header />\r\n      {showLoginAndCreate()}\r\n      <Switch>\r\n      {loginStatus === true &&\r\n        <Route path =\"/kitchen\">\r\n          <Kitchen />\r\n        </Route>\r\n}\r\n      {loginStatus === true &&\r\n        <Route path =\"/vehicles\">\r\n          <Vehicles />\r\n        </Route>\r\n}\r\n      {loginStatus === true &&\r\n        <Route path=\"/freezer\">\r\n          <Freezer />\r\n          </Route>\r\n}\r\n      {loginStatus === true &&\r\n        <Route path=\"/shoppinglist\">\r\n          <ShoppingList />\r\n        </Route>\r\n}\r\n      {loginStatus === true &&\r\n        <Route path=\"/renovations\">\r\n          <Renovations notificationType={notificationType} setNotificationType={setNotificationType} confirmation={confirmation} setConfirmation={setConfirmation} notificationButtons={notificationButtons} setNotificationButtons={setNotificationButtons} notificationMessage={notificationMessage} setNotificationMessage={setNotificationMessage} renovations={renovations} setRenovations={setRenovations} user={user} setUser={setUser}/>\r\n        </Route>\r\n}\r\n      {loginStatus === true &&\r\n        <Route path=\"/maintenances\">\r\n          <Maintenances notificationMessage={notificationMessage} setNotificationMessage={setNotificationMessage} notificationType={notificationType} setNotificationType={setNotificationType} completedTasks={completedTasks} setCompletedTasks={setCompletedTasks} taskList={taskList} setTaskList={setTaskList} user={user} setUser={setUser}/>\r\n        </Route>\r\n}\r\n      {loginStatus === true &&\r\n        <Route path=\"/Money\" >\r\n          <Money completedTasks={completedTasks} setCompletedTasks={setCompletedTasks} setTaskList={setTaskList} setRenovations={setRenovations} renovations={renovations} taskList={taskList}/>\r\n        </Route>\r\n}    \r\n        <Route path =\"/\">\r\n        {loginStatus === false &&  showCreateUserForm === false &&\r\n          <Login notificationType={notificationType} setNotificationType={setNotificationType} confirmation={confirmation} setConfirmation={setConfirmation} notificationButtons={notificationButtons} setNotificationButtons={setNotificationButtons} notificationMessage={notificationMessage} setNotificationMessage={setNotificationMessage} showCreateUserForm={showCreateUserForm} setShowCreateUserForm={setShowCreateUserForm} loginStatus={loginStatus} setLoginStatus={setLoginStatus} loggedInUser={loggedInUser} setLoggedInUser={setLoggedInUser} username={username} setUsername={setUsername} password={password} setPassword={setPassword} user={user} setUser={setUser} />\r\n} \r\n          {showCreateUserForm && (\r\n            <CreateUserView notificationType={notificationType} setNotificationType={setNotificationType} confirmation={confirmation} setConfirmation={setConfirmation} notificationButtons={notificationButtons} setNotificationButtons={setNotificationButtons} notificationMessage={notificationMessage} setNotificationMessage={setNotificationMessage} setShowCreateUserForm={setShowCreateUserForm} setLoginStatus={setLoginStatus} user={user} setLoggedInUser={setLoggedInUser} username={username} setUsername={setUsername} password={password} setPassword={setPassword} user={user} setUser={setUser}/>\r\n          )}\r\n          \r\n\r\n        </Route>\r\n      </Switch>\r\n      <div className=\"bottom\">\r\n            \r\n      </div>\r\n\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default App\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n  useParams,\n  useHistory,\n} from \"react-router-dom\"\nimport App from './App';\n\n\nReactDOM.render(\n  <Router>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Router>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}